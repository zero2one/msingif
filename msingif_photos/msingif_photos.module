<?php
/**
 * @file
 * Code for the Photos feature.
 */

include_once('msingif_photos.features.inc');


/**
 * Implements hook_menu()
 * 
 * Paths:
 *   - node/%node/add-photos : 
 *     multi photo upload form for photo albums
 *   - admin/config/msingif/photos : 
 *     Configuration of the msingif_photos module
 */
function msingif_photos_menu() {
  $items = array();
  
  $items['node/%node/add-photos']  = array(
    'title'            => 'Add photos',
    'page callback'    => 'drupal_get_form',
    'page arguments'   => array('msingif_photos_multi_upload_form', 1),
    'access callback'  => 'msingif_photos_multi_upload_access',
    'access arguments' => array(1),
    'type'             => MENU_LOCAL_TASK
  );
  
  $items['admin/config/msingif/photos'] = array(
    'title'            => 'Photos',
    'description'      => 'Configure photos settings.',
    'page callback'    => 'drupal_get_form',
    'page arguments'   => array('msingif_photos_settings_form'),
    'access arguments' => array('access administration pages'),
    'file'             => 'msingif_photos.admin.inc',
    'weight'           => 0,
  );
  
  return $items;
}

/**
* Implements hook_admin_paths().
*/
function msingif_photos_admin_paths() {
  $paths = array(
    'node/*/add-photos' => TRUE,
  );
  return $paths;
}



/**
 * Access callback for the add-photos tab
 * 
 * @param  $node
 * 
 * @return bool
 * 
 * @see msingif_photos_menu()
 */
function msingif_photos_multi_upload_access($node) {
  // check create access
  if(!user_access('create photo content') && !user_access('administer nodes')) {
    return FALSE;
  }
  
  // check content type
  if($node->type !== 'photo_album') {
    return FALSE;
  }
  
  // check if the user can add photos to the current photo album
  if(!user_access('administer nodes') 
    && !user_access('edit any photo_album content')
  ) {
    global $user;
    return ($user->uid === $node->uid);
  }
  
  return TRUE;
}




/**
 * Forms
 ****************************************************************************/
/**
 * Form to upload multiple photo's at once for the given photo album
 * 
 * Is a wrapper around the _msingif_photos_multi_upload_form() function.
 * 
 * @param  $form
 * @param  $form_state
 * @param  $photo_album
 *     The photo album node
 * 
 * @return array
 * 
 * @see msingif_photos_multi_upload_form_validate()
 * @see msingif_photos_multi_upload_form_submit()
 * @ingroup forms
 */
function msingif_photos_multi_upload_form(&$form, $form_state, $photo_album) {
  module_load_include('inc', 'msingif_photos', 'includes/upload_photos');
  return _msingif_photos_multi_upload_form($form, $form_state, $photo_album);
}

/**
 * Submit the multi upload form
 * 
 * Is a wrapper around the _msingif_photos_multi_upload_form_submit() function.
 * 
 * @param  $form
 * @param  $form_state
 * 
 * @return void
 * 
 * @see msingif_photos_multi_upload_form_validate()
 */
function msingif_photos_multi_upload_form_submit($form, &$form_state) {
  module_load_include('inc', 'msingif_photos', 'includes/upload_photos');
  _msingif_photos_multi_upload_form_submit($form, $form_state);
}



/**
 * Image styles
 *****************************************************************************/
/**
 * Implements hook_image_default_styles().
 * 
 * Provides 3 new image styles:
 * - photo_block : The image style for photo's shown in blocks.
 * - photo_view  : The image style for photo pages (full size view).
 * - photo_thumb : The image style for photo overviews.
 */
function msingif_photos_image_default_styles() {
  $styles = array();

  // Exported image style: photo_block
  $styles['photo_thumb'] = array(
    'name' => 'photo_block',
    'effects' => array(
      1 => array(
        'label' => 'Scale',
        'help' => 'Scaling will maintain the aspect-ratio of the original image. If only a single dimension is specified, the other dimension will be calculated.',
        'effect callback' => 'image_scale_effect',
        'dimensions callback' => 'image_scale_dimensions',
        'form callback' => 'image_scale_form',
        'summary theme' => 'image_scale_summary',
        'module' => 'image',
        'name' => 'image_scale',
        'data' => array(
          'width'  => _msingif_photos_style_get_size('photo_thumb', 'width'),
          'height' => _msingif_photos_style_get_size('photo_thumb', 'height'),
          'upscale' => 0,
        ),
        'weight' => '1',
      ),
    ),
  );

  // Exported image style: photo_block
  $styles['photo_block'] = array(
    'name' => 'photo_block',
    'effects' => array(
      1 => array(
        'label' => 'Scale',
        'help' => 'Scaling will maintain the aspect-ratio of the original image. If only a single dimension is specified, the other dimension will be calculated.',
        'effect callback' => 'image_scale_effect',
        'dimensions callback' => 'image_scale_dimensions',
        'form callback' => 'image_scale_form',
        'summary theme' => 'image_scale_summary',
        'module' => 'image',
        'name' => 'image_scale',
        'data' => array(
          'width'  => _msingif_photos_style_get_size('photo_block', 'width'),
          'height' => _msingif_photos_style_get_size('photo_block', 'height'),
          'upscale' => 0,
        ),
        'weight' => '1',
      ),
    ),
  );

  // Exported image style: photo_view
  $styles['photo_view'] = array(
    'name' => 'photo_view',
    'effects' => array(
      2 => array(
        'label' => 'Scale',
        'help' => 'Scaling will maintain the aspect-ratio of the original image. If only a single dimension is specified, the other dimension will be calculated.',
        'effect callback' => 'image_scale_effect',
        'dimensions callback' => 'image_scale_dimensions',
        'form callback' => 'image_scale_form',
        'summary theme' => 'image_scale_summary',
        'module' => 'image',
        'name' => 'image_scale',
        'data' => array(
          'width'  => _msingif_photos_style_get_size('photo_view', 'width'),
          'height' => _msingif_photos_style_get_size('photo_view', 'height'),
          'upscale' => 0,
        ),
        'weight' => '1',
      ),
    ),
  );

  return $styles;
}

/**
 * Get the default image style sizes
 * 
 * Used to define the default sizes at one place
 * 
 * @param $style
 *   The style name
 * @param $direction
 *   The dimensions direction (width or height)
 */
function _msingif_photos_style_get_size($style, $direction) {
  $dimensions = array(
    'photo_thumb' => array('width' => 120, 'height' => 120),
    'photo_block' => array('width' => 280, 'height' => 280),
    'photo_view'  => array('width' => 620, 'height' => 465),
  );
  
  // check if size is supported
  if(empty($dimensions[$style][$direction])) {
    return NULL;
  }
  
  $variable_key = 'msingif_photos_style_' . $style . '_' . $direction;
  
  return variable_get($variable_key, $dimensions[$style][$direction]); 
}
