<?php
/**
 * @file
 * Code for the Photos feature.
 */

include_once('msingif_photos.features.inc');



/**
 * Implements hook_menu()
 * 
 * Paths:
 *   - node/%node/add-photos : 
 *     multi photo upload form for photo albums
 *   - admin/config/msingif/photos : 
 *     Configuration of the msingif_photos module
 */
function msingif_photos_menu() {
  $items = array();
  
  $items['node/%node/add-photos']  = array(
    'title'            => 'Add photos',
    'page callback'    => 'drupal_get_form',
    'page arguments'   => array('msingif_photos_multi_upload_form', 1),
    'access callback'  => 'msingif_photos_multi_upload_access',
    'access arguments' => array(1),
    'type'             => MENU_LOCAL_TASK,
    'weight'           => 3,
  );
  
  $items['admin/config/msingif/photos'] = array(
    'title'            => 'Photos',
    'description'      => 'Configure photos settings.',
    'page callback'    => 'drupal_get_form',
    'page arguments'   => array('msingif_photos_settings_form'),
    'access arguments' => array('access administration pages'),
    'file'             => 'msingif_photos.admin.inc',
    'weight'           => 0,
  );
  
  return $items;
}

/**
 * Implements hook_menu_alter()
 * 
 * Adds the management view as a tab to the photo album node
 */
function msingif_photos_menu_alter(&$items) {
  $items['node/%views_arg/manage-photos']['title'] = 'Manage photos';
  $items['node/%views_arg/manage-photos']['access callback'] = 'msingif_photos_multi_upload_access';
  $items['node/%views_arg/manage-photos']['access arguments'] = array(1);
  $items['node/%views_arg/manage-photos']['type'] = MENU_LOCAL_TASK;
  $items['node/%views_arg/manage-photos']['weight'] = 4;
}

/**
 * Implemens hook_module_implements_alter()
 * 
 * Pushes the menu alter to the end of the hooks
 */
function msingif_photos_module_implements_alter(&$implementations, $hook) {
  switch($hook) {
    case 'menu_alter':
      $group = $implementations['msingif_photos'];
      unset($implementations['msingif_photos']);
      $implementations['msingif_photos'] = $group;  
      break;
  }
}

/**
* Implements hook_admin_paths().
*/
function msingif_photos_admin_paths() {
  $paths = array(
    'node/*/add-photos'    => TRUE,
    'node/*/manage-photos' => TRUE,
  );
  return $paths;
}

/**
 * Implements hook_menu_local_tasks_alter().
 * 
 * - Adds the add photos action to the manage photos page
 */
function msingif_photos_menu_local_tasks_alter(&$data, $router_item, $root_path) {
  // Add action link to 'node/%/manage-photos' page.
  switch($root_path) {
    case 'node/%/manage-photos':
      $item = menu_get_item('node/' . arg(1) . '/add-photos');
      $data['actions']['output'][] = array(
        '#theme' => 'menu_local_action',
        '#link' => $item,
      );
      break;
  }
}


/**
 * Access callback for the add-photos tab
 * 
 * @param  $node
 *   Node object or nid
 * 
 * @return bool
 * 
 * @see msingif_photos_menu()
 */
function msingif_photos_multi_upload_access($node) {
  // check create access
  if(!user_access('create photo content') && !user_access('administer nodes')) {
    return FALSE;
  }
  
  if(is_numeric($node)) {
    $node = node_load($node);
    if(!$node) {
      return FALSE;
    }
  }
  
  // check content type
  if($node->type !== 'photo_album') {
    return FALSE;
  }
  
  // check if the user can add photos to the current photo album
  if(!user_access('administer nodes') 
    && !user_access('edit any photo_album content')
  ) {
    global $user;
    return ($user->uid === $node->uid);
  }
  
  return TRUE;
}



/**
 * Node API
 *****************************************************************************/
/**
 * Implements hook_node_insert()
 */
function msingif_photos_node_insert($node) {
  _msingif_photos_node_photo_save($node);
}

/**
 * Implements hook_node_update()
 */
function msingif_photos_node_update($node) {
  _msingif_photos_node_photo_save($node);
}

/**
 * Implements hook_node_delete()
 * 
 * Makes another photo (if any left) the album photo if the current album photo
 * gets deleted
 */
function msingif_photos_node_delete($node) {
  _msingif_photos_node_photo_delete($node);
}

/**
 * Check if the node is indicated as an album node, if so make it so
 * 
 * This checks if a node should be the album photo.  
 * If so, it will unset the current album photo (if any) 
 * and make this the new album photo.
 * 
 * @param $node
 * 
 * @return void  
 */
function _msingif_photos_node_photo_save($node) {
  if($node->type !== 'photo') {
    return;
  }
  
  if(empty($node->field_photo_album_front[LANGUAGE_NONE][0]['value'])) {
    return;
  }
  
  msingif_photos_set_photo_album_photo(
    $node->field_photo_album[LANGUAGE_NONE][0]['nid'], 
    $node
  );
}

/**
 * Checks, during deletion if a node is the album photo, if so make another 
 * node (if any) the photo album
 * 
 * @param $node
 * 
 * @return void
 */
function _msingif_photos_node_photo_delete($node) {
  // @todo: make this work ;-)
}



/**
 * Forms
 *****************************************************************************/
/**
 * Form to upload multiple photos at once for the given photo album
 * 
 * Is a wrapper around the _msingif_photos_multi_upload_form() function.
 * 
 * @param  $form
 * @param  $form_state
 * @param  $photo_album
 *     The photo album node
 * 
 * @return array
 * 
 * @see msingif_photos_multi_upload_form_validate()
 * @see msingif_photos_multi_upload_form_submit()
 * @ingroup forms
 */
function msingif_photos_multi_upload_form(&$form, $form_state, $photo_album) {
  module_load_include('inc', 'msingif_photos', 'includes/upload_photos');
  return _msingif_photos_multi_upload_form($form, $form_state, $photo_album);
}

/**
 * Submit the multi upload form
 * 
 * Is a wrapper around the _msingif_photos_multi_upload_form_submit() function.
 * 
 * @param  $form
 * @param  $form_state
 * 
 * @return void
 * 
 * @see msingif_photos_multi_upload_form_validate()
 */
function msingif_photos_multi_upload_form_submit($form, &$form_state) {
  module_load_include('inc', 'msingif_photos', 'includes/upload_photos');
  _msingif_photos_multi_upload_form_submit($form, $form_state);
}

/**
 * Get the currently album photo node ids
 * 
 * @param $album
 *   The album node
 * 
 * @return array
 */
function msingif_photos_get_photo_album_photo($album_node) {
  $nodes = array();
  
  $q = db_select('node', 'n');
  $q->join('field_data_field_photo_album_front', 'photo', 'n.nid = photo.entity_id');
  $q->join('field_data_field_photo_album ', 'album', 'n.nid = album.entity_id');
  $q->fields('n', array('nid'));
  $q->condition('photo.field_photo_album_front_value', 1, '=');
  $q->condition('album.field_photo_album_nid', $album_node->nid, '=');
  
  $result = $q->execute();
  foreach($result AS $row) {
    $nodes[] = $row->nid;
  }
  
  return $nodes;
}

/**
 * Make a photo node the album photo
 * 
 * @param $album_node
 *   The photo album (nid or node object)
 * @param $photo_node
 *   The photo node (nid or node object)
 * 
 * @return void
 */
function msingif_photos_set_photo_album_photo($album_node, $photo_node) {
  // get the album node
  if(is_numeric($album_node)) {
    $album_node = node_load($album_node);
  }
  if(!$album_node || $album_node->type != 'photo_album') {
    throw new Exception('Photo album not found or node is not a photo album.');
  }
  
  // get the photo node
  if(is_numeric($photo_node)) {
    $photo_node = node_load($photo_node);
  }
  if(!$photo_node || $photo_node->type != 'photo') {
    throw new Exception('Photo not found or node is not a photo.');
  }
  
  // get the current album photo
  $photo_is_front = FALSE;
  $album_photos = msingif_photos_get_photo_album_photo($album_node);
  
  foreach($album_photos AS $album_photo) {
    if((int)$album_photo === (int)$photo_node->nid) {
      $photo_is_front = TRUE;
    }
    else {
      msingif_photos_unset_photo_album_photo($album_photo);
    }
  }

  // was the photo already the photo album?  
  if($photo_is_front) {
    return;
  }
  
  $photo_node->field_photo_album_front[LANGUAGE_NONE][0]['value'] = 1;
  node_save($photo_node);
}

/**
 * Unset the front photo status of an album photo
 * 
 * @param $photo_node
 *   The photo node id or object
 * 
 * @return void
 */
function msingif_photos_unset_photo_album_photo($photo_node) {
  // get the photo node
  if(is_numeric($photo_node)) {
    $photo_node = node_load($photo_node);
  }
  if(!$photo_node || $photo_node->type != 'photo') {
    throw new Exception('Photo not found or node is not a photo.');
  }

  $photo_node->field_photo_album_front[LANGUAGE_NONE][0]['value'] = 0;
  node_save($photo_node);
}



/**
 * Image styles
 *****************************************************************************/
/**
 * Implements hook_image_default_styles().
 * 
 * Provides 3 new image styles:
 * - photo_block : The image style for photos shown in blocks.
 * - photo_view  : The image style for photo pages (full size view).
 * - photo_thumb : The image style for photo overviews.
 * 
 * The possible styles and there default config are located in 
 * _msingif_photos_style_get_config()
 * 
 * @param $reset
 *   (optional) If TRUE, all the style defeinitions will be recreated
 * 
 * @return array
 */
function msingif_photos_image_default_styles($reset = FALSE) {
  static $styles = array();
  
  if(empty($styles)) {
    $types = _msingif_photos_style_get_config();
  
    foreach($types AS $type => $config) {
      $styles[$type] = array(
        'name' => $type,
        'effects' => array(),
      );
      $styles[$type]['effects'][1] = _msingif_photos_image_get_style_definition(
        $config['effect'], 
        $config['width'], 
        $config['height']
      );
    }
  }
  
  return $styles;

  // Exported image style: photo_block
  $styles['photo_thumb'] = array(
    'name' => 'photo_thumb',
    'effects' => array(
      1 => array(
        'label' => 'Scale',
        'help' => 'Scaling will maintain the aspect-ratio of the original image. If only a single dimension is specified, the other dimension will be calculated.',
        'effect callback' => 'image_scale_effect',
        'dimensions callback' => 'image_scale_dimensions',
        'form callback' => 'image_scale_form',
        'summary theme' => 'image_scale_summary',
        'module' => 'image',
        'name' => 'image_scale',
        'data' => array(
          'width'  => _msingif_photos_style_get_config('photo_thumb', 'width'),
          'height' => _msingif_photos_style_get_config('photo_thumb', 'height'),
          'upscale' => 0,
        ),
        'weight' => '1',
      ),
    ),
  );

  // Exported image style: photo_block
  $styles['photo_block'] = array(
    'name' => 'photo_block',
    'effects' => array(
      1 => array(
        'label' => 'Scale',
        'help' => 'Scaling will maintain the aspect-ratio of the original image. If only a single dimension is specified, the other dimension will be calculated.',
        'effect callback' => 'image_scale_effect',
        'dimensions callback' => 'image_scale_dimensions',
        'form callback' => 'image_scale_form',
        'summary theme' => 'image_scale_summary',
        'module' => 'image',
        'name' => 'image_scale',
        'data' => array(
          'width'  => _msingif_photos_style_get_config('photo_block', 'width'),
          'height' => _msingif_photos_style_get_config('photo_block', 'height'),
          'upscale' => 0,
        ),
        'weight' => '1',
      ),
    ),
  );

  // Exported image style: photo_view
  $styles['photo_view'] = array(
    'name' => 'photo_view',
    'effects' => array(
      2 => array(
        'label' => 'Scale',
        'help' => 'Scaling will maintain the aspect-ratio of the original image. If only a single dimension is specified, the other dimension will be calculated.',
        'effect callback' => 'image_scale_effect',
        'dimensions callback' => 'image_scale_dimensions',
        'form callback' => 'image_scale_form',
        'summary theme' => 'image_scale_summary',
        'module' => 'image',
        'name' => 'image_scale',
        'data' => array(
          'width'  => _msingif_photos_style_get_config('photo_view', 'width'),
          'height' => _msingif_photos_style_get_config('photo_view', 'height'),
          'upscale' => 0,
        ),
        'weight' => '1',
      ),
    ),
  );

  return $styles;
}

/**
 * Get a predefined style
 * 
 * @param $type
 *   Possible styles: 
 *   - scale
 *   - scalecrop
 * @param $width
 * @param $height
 * 
 * @return array
 */
function _msingif_photos_image_get_style_definition($effect, $width, $height) {
  $styles = array(
    'scale' => array(
      'label' => 'Scale',
      'help' => 'Scaling will maintain the aspect-ratio of the original image. If only a single dimension is specified, the other dimension will be calculated.',
      'effect callback' => 'image_scale_effect',
      'dimensions callback' => 'image_scale_dimensions',
      'form callback' => 'image_scale_form',
      'summary theme' => 'image_scale_summary',
      'module' => 'image',
      'name' => 'image_scale',
      'data' => array(
        'width'  => $width,
        'height' => $height,
        'upscale' => 0,
      ),
      'weight' => '1',
    ),
    'scalecrop' => array(
      'label' => 'Scale and crop',
      'help' => 'Scale and crop will maintain the aspect-ratio of the original image, then crop the larger dimension. This is most useful for creating perfectly square thumbnails without stretching the image.',
      'effect callback' => 'image_scale_and_crop_effect',
      'dimensions callback' => 'image_resize_dimensions',
      'form callback' => 'image_resize_form',
      'summary theme' => 'image_resize_summary',
      'module' => 'image',
      'name' => 'image_scale_and_crop',
      'data' => array(
        'width'  => $width,
        'height' => $height,
      ),
      'weight' => '1',
    ),
  );
  
  if(empty($styles[$effect])) {
    return NULL;
  }
  
  return $styles[$effect];
}

/**
 * Get the default image style sizes
 * 
 * Used to define the default sizes at one place
 * 
 * @param $style
 *   (optional) The style name.
 *   If none is given, all style configs will be returned
 * @param $part
 *   (optional) What part of the default settings (effect, width or height)
 *   If none is given, the full settings array will be returned.
 */
function _msingif_photos_style_get_config($style = NULL, $part = NULL) {
  static $loaded = FALSE;
  static $settings = array(
    'photo_thumb' => array('effect' => 'scale', 'width' => 120, 'height' => 120),
    'photo_block' => array('effect' => 'scale', 'width' => 280, 'height' => 280),
    'photo_view'  => array('effect' => 'scale', 'width' => 620, 'height' => 465),
  );
  
  // load the defaults
  if(!$loaded) {
    foreach($settings AS $name => $defaults) {
      foreach($defaults AS $key => $value) {
        $settings[$name][$key] = variable_get('msingif_photos_style_' . $name . '_' . $key, $value);
      }
    }
    $loaded = TRUE;
  }
  
  if(is_null($style)) {
    return $settings;
  }
  
  // check if style is supported
  if(empty($settings[$style])) {
    return NULL;
  }
  
  // check if full array is requested
  if(is_null($part)) {
    return $settings[$style];
  }
  
  // check if part is supported
  if(empty($settings[$style][$part])) {
    return NULL;
  }
  
  return $settings[$style][$part]; 
}



/**
 * Views
 *****************************************************************************/
/**
 * Implements hook_views_query_alter()
 * 
 * Adds the albums without photos to the overview page
 */
function msingif_photos_views_query_alter(&$view, &$query) {
  $view_name    = $view->name;
  $view_display = $view->current_display;
  
  if($view_name == 'photo_albums' && $view_display == 'page_overview') {
    // add the OR for albums without a album photo
    $cond1 = $query->where[0]['conditions'][2];
    unset($query->where[0]['conditions'][2]);
    $cond1['operator'] = '=';
    
    $cond2 = $cond1;
    $cond2['value'] = NULL;
    $cond2['operator'] = 'IS NULL';
    
    $conditions = array(
      'conditions' => array(
        $cond1, $cond2
      ),
      'args' => array(), 
      'type' => 'OR',
    );
    $query->where[] = $conditions;
    
    // group by nid to avoid double album listing
    $query->groupby[] = array('field' => 'field_photo_album_node');
    
    //var_dump($query); die;
  }
}
 
/**
 * Implements hook_views_pre_render()
 * 
 * Adds "add" buttons to empty views:
 * - Photo albums overview
 * - Album photos overview
 */
function msingif_photos_preprocess_views_view(&$vars) {
  $view         = $vars['view'];
  $view_name    = $vars['name'];
  $view_display = $vars['display_id']; 
  
  //var_dump($view_name, $view_display);
  //var_dump($view->result, $vars['empty']);
  
  if($view_name == 'photo_albums' && $view_display == 'page_overview') {
    if(!user_access('create photo_album content')) {
      return;
    }
    
    if(empty($view->result)) {
      $output = array();
      $output[] = t('Please add your first Photo album to get started.');
      $output[] = '<ul class="action-links"><li>' 
        . l('Add Photo album', 'node/add/photo-album') 
        . '</li></ul>';
      $vars['empty'] = implode(PHP_EOL, $output);
    }
    return;
  }
  
  if($view_name == 'photo_album' && $view_display == 'overview') {
    $nid = arg(1);
    if(!msingif_photos_multi_upload_access($nid)) {
      return;
    }

    if(empty($view->result)) {
      $output = array();
      $output[] = t('Please add Photos to this album to get started.');
      $output[] = '<ul class="action-links"><li>'
        . l('Add Photos', 'node/' . $nid . '/add-photos') 
        . '</li></ul>';
      $vars['empty'] = implode(PHP_EOL, $output);
    }
    return;
  }
}



